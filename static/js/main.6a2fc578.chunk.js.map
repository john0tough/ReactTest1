{"version":3,"sources":["components/Table/TableBody/TableBody.tsx","components/Table/TableHeader/TableHeader.tsx","components/Table/Table.tsx","components/Form/Form.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["TableBody","props","rows","CharactersData","map","row","index","key","name","job","onClick","RemoveCharacter","className","TableHeader","Table","this","Component","Form","prop","state","initialState","handleChange","event","currentTarget","value","setState","submitForm","character","handleSubmit","type","onChange","App","Characters","data","removeCharacter","console","log","filter","i","fetch","then","result","json","entry","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a2fc578.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TableProps  } from '../contracts/characters';\r\nexport const TableBody = (props: TableProps) => {\r\n    const rows = props.CharactersData.map((row, index) => \r\n        (\r\n        <tr key={index}>\r\n          <td>{row.name}</td> \r\n          <td>{row.job}</td>\r\n          <td><button onClick={() => props.RemoveCharacter(index)} className=\"btn btn-success\">Remove</button></td>\r\n        </tr>\r\n        )\r\n    );\r\n    return <tbody>{rows}</tbody>;\r\n  }\r\n","import React from 'react';\r\nconst TableHeader = () => {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Job</th>\r\n        </tr>\r\n      </thead>\r\n    )\r\n  }\r\nexport default TableHeader;","import React, { Component } from \"react\";\r\nimport { TableBody } from \"./TableBody/TableBody\";\r\nimport TableHeader from \"./TableHeader/TableHeader\";\r\nimport { TableProps } from \"./contracts/characters\";\r\n\r\nexport class Table extends Component<TableProps, {}> {    \r\n    render() {        \r\n        const { CharactersData, RemoveCharacter} = this.props;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                   <table className=\"table\">\r\n                    <TableHeader/>\r\n                    <TableBody CharactersData={CharactersData} RemoveCharacter={RemoveCharacter}/>\r\n                   </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { FormProps } from \"./contracts/form.props\";\r\nimport React, { Component } from \"react\";\r\nimport { Character } from \"../Table/contracts/character.model\";\r\n\r\nexport class Form extends Component<FormProps, {}> {\r\n    state: Character\r\n    initialState = {\r\n        job: '',\r\n        name: ''\r\n    } as Character;\r\n    constructor(prop: FormProps) {        \r\n        super(prop);\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        \r\n        const { name, value } = event.currentTarget;\r\n        this.setState({\r\n            [name]: value\r\n        });        \r\n    }\r\n    submitForm = () => {\r\n        const character = this.state;\r\n        this.props.handleSubmit(character);\r\n        this.setState(this.initialState);\r\n    }\r\n    render() {\r\n        const { name, job } = this.state;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <form className=\"form\">\r\n                    <label>Name</label>\r\n                    <input \r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        onChange={this.handleChange} \r\n                    />\r\n                    <label>Job</label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"job\"\r\n                        value={job}\r\n                        onChange={this.handleChange} \r\n                    />\r\n                    <input className=\"btn btn-default\" type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Table } from '../Table/Table';\r\nimport { AppState } from '../Table/contracts/characters';\r\nimport { Character } from '../Table/contracts/character.model';\r\nimport { Form } from '../Form/Form';\r\n\r\nexport class App extends React.Component<{}, AppState> {\r\n  name = 'nombre'\r\n  state = {\r\n    Characters: [],\r\n    data: []\r\n  };\r\n  componentDidMount() {\r\n    const url =\r\n      'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\r\n\r\n    fetch(url)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        this.setState({\r\n          data: result,\r\n        })\r\n      })\r\n  }\r\n  removeCharacter = (index: number) => {\r\n    const { Characters } = this.state;\r\n    console.log(index, Characters.filter((character, i) => i !== index));\r\n    this.setState({\r\n      Characters: Characters.filter((character, i) => i !== index)\r\n    });\r\n  }\r\n\r\n  handleSubmit = (character: Character) => {\r\n    this.setState({ Characters: [...this.state.Characters, character] })\r\n  }\r\n\r\n  render() {\r\n    const { Characters, data } = this.state;\r\n    const result = data.map((entry, index) => {\r\n      return <li key={index}>{entry}</li>\r\n    })\r\n    return (\r\n      <div className=\"container\">\r\n        <Table CharactersData={Characters} RemoveCharacter={this.removeCharacter} />\r\n        <Form handleSubmit={this.handleSubmit} />\r\n        <ul>{result}</ul>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n// const App: React.FC = () => {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.tsx</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport { App } from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}